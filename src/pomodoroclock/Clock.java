/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pomodoroclock;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author laura
 */
public class Clock extends javax.swing.JFrame {

    /**
     * Creates new form Clock
     */
    int auxMinutosTrabalho; // minutos durante a sessão de trabalho
    int auxSegundosTrabalho; // segundos durante a sessão de trabalho
    int minP; // variavel auxiliar p/ quando o botao de pause é acionado
    int secP; // variavel auxiliar p/ quando o botao de pause é acionado
    int auxMinutosPausa; // minutos durante a sessão de descanso
    int auxSegundosPausa; // segundos durante a sessão de descanso
    int qtdPausa = 1; // conta a quantidade de pausas ( na 4ª o tempo é de 10 min)
    boolean stop = false; // verifica se o botao de stop foi acionado
    boolean reset = false; // verifica se o botao de reset foi acionado
    boolean pause = false; // verifica se o botao de pause foi acionado
    boolean start = false; // verifica se o botao de start foi acionado
    boolean pausa = false; // verifica se o tempo de descanso começou


    public Clock() {
        initComponents();
        boxPadrao.setSelected(rootPaneCheckingEnabled);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        labelMinutos = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        labelSegundos = new javax.swing.JLabel();
        botaoStop = new javax.swing.JButton();
        botaoReset = new javax.swing.JButton();
        botaoStart = new javax.swing.JButton();
        boxPadrao = new javax.swing.JCheckBox();
        boxPersonalizado = new javax.swing.JCheckBox();
        textMinutosTrabalho = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        textSegundosTrabalho = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textMinutosPausa = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textSegundosPausa = new javax.swing.JTextField();
        textSession = new javax.swing.JLabel();
        botaoPause = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), "POMODORO CLOCK", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Corbel", 1, 18))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        labelMinutos.setFont(new java.awt.Font("Corbel", 1, 48)); // NOI18N
        labelMinutos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel1.setFont(new java.awt.Font("Corbel", 1, 48)); // NOI18N
        jLabel1.setText(":");

        labelSegundos.setFont(new java.awt.Font("Corbel", 1, 48)); // NOI18N
        labelSegundos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(labelMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelSegundos, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(15, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(labelMinutos)
                                        .addComponent(labelSegundos))
                                .addContainerGap())
        );

        botaoStop.setBackground(new java.awt.Color(204, 0, 0));
        botaoStop.setFont(new java.awt.Font("Corbel", 1, 20)); // NOI18N
        botaoStop.setForeground(new java.awt.Color(255, 255, 255));
        botaoStop.setText("STOP");
        botaoStop.setAlignmentY(0.0F);
        botaoStop.setBorderPainted(false);
        botaoStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoStopActionPerformed(evt);
            }
        });

        botaoReset.setBackground(new java.awt.Color(0, 0, 153));
        botaoReset.setFont(new java.awt.Font("Corbel", 1, 20)); // NOI18N
        botaoReset.setForeground(new java.awt.Color(255, 255, 255));
        botaoReset.setText("RESET");
        botaoReset.setAlignmentY(0.0F);
        botaoReset.setBorderPainted(false);
        botaoReset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoResetActionPerformed(evt);
            }
        });

        botaoStart.setBackground(new java.awt.Color(0, 102, 0));
        botaoStart.setFont(new java.awt.Font("Corbel", 1, 20)); // NOI18N
        botaoStart.setForeground(new java.awt.Color(255, 255, 255));
        botaoStart.setText("START");
        botaoStart.setAlignmentY(0.0F);
        botaoStart.setBorderPainted(false);
        botaoStart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoStartActionPerformed(evt);
            }
        });

        boxPadrao.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(boxPadrao);
        boxPadrao.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        boxPadrao.setText("Use the traditional time (25 minutes)");
        boxPadrao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxPadraoActionPerformed(evt);
            }
        });

        boxPersonalizado.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(boxPersonalizado);
        boxPersonalizado.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        boxPersonalizado.setText("Customize the time in both sessions");
        boxPersonalizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxPersonalizadoActionPerformed(evt);
            }
        });

        textMinutosTrabalho.setEditable(false);
        textMinutosTrabalho.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        textMinutosTrabalho.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        jLabel2.setText(":");

        textSegundosTrabalho.setEditable(false);
        textSegundosTrabalho.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        textSegundosTrabalho.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel3.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        jLabel3.setText("Break session:");

        jLabel4.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        jLabel4.setText("Working session:");

        textMinutosPausa.setEditable(false);
        textMinutosPausa.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        textMinutosPausa.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        jLabel5.setText(":");

        textSegundosPausa.setEditable(false);
        textSegundosPausa.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        textSegundosPausa.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        textSession.setFont(new java.awt.Font("Corbel", 1, 18)); // NOI18N
        textSession.setForeground(new java.awt.Color(153, 0, 0));

        botaoPause.setBackground(new java.awt.Color(102, 0, 102));
        botaoPause.setFont(new java.awt.Font("Corbel", 1, 20)); // NOI18N
        botaoPause.setForeground(new java.awt.Color(255, 255, 255));
        botaoPause.setText("PAUSE");
        botaoPause.setAlignmentY(0.0F);
        botaoPause.setBorderPainted(false);
        botaoPause.setEnabled(false);
        botaoPause.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botaoPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoPauseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel4)
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                                .addComponent(textMinutosTrabalho, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel2)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(textSegundosTrabalho, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jLabel3)
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                                .addComponent(textMinutosPausa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jLabel5)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(textSegundosPausa, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(botaoStart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(botaoStop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(botaoReset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(botaoPause, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(56, 56, 56))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(boxPersonalizado)
                                                        .addComponent(boxPadrao))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(textSession, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(26, 26, 26))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(boxPadrao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(boxPersonalizado)
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(botaoStart)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                                .addComponent(botaoPause)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(botaoStop)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(botaoReset)
                                                .addGap(17, 17, 17))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                                .addComponent(textSession, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                                .addComponent(jLabel4)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(textMinutosTrabalho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel2)
                                                                        .addComponent(textSegundosTrabalho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jLabel3)
                                                                .addGap(4, 4, 4)
                                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(textMinutosPausa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel5)
                                                                        .addComponent(textSegundosPausa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void boxPersonalizadoActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        selecao();
    }

    private void boxPadraoActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        selecao();
    }

    private void botaoResetActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        reset = true;
        labelMinutos.setText("0");
        labelSegundos.setText("0");
        textSession.setText("");
    }

    private void botaoStopActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        stop = true;
        textSession.setText("");
    }

    private void botaoPauseActionPerformed(java.awt.event.ActionEvent evt) {
        pause = true;
        minP = Integer.parseInt(labelMinutos.getText());
        secP = Integer.parseInt(labelSegundos.getText());
        // TODO add your handling code here:
    }

    private void botaoStartActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        stop = false;
        start = true;
        botaoPause.setEnabled(true);
        funcionamento();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clock.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clock.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clock.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clock.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Clock().setVisible(true);
            }
        });

    }

    void playSound(String soundFile) throws LineUnavailableException, IOException, UnsupportedAudioFileException {
        File f = new File(soundFile);
        AudioInputStream audioIn = AudioSystem.getAudioInputStream(f.toURI().toURL());
        Clip clip = AudioSystem.getClip();
        clip.open(audioIn);
        clip.start();
    }

    // verifica qual das opções está marcada
    public void selecao() {
        boolean selecionado = true;

        if (boxPadrao.isSelected()) {
            selecionado = false;
        }

        if (selecionado) {
            textSegundosTrabalho.setEditable(rootPaneCheckingEnabled);
            textMinutosTrabalho.setEditable(rootPaneCheckingEnabled);
            textSegundosPausa.setEditable(rootPaneCheckingEnabled);
            textMinutosPausa.setEditable(rootPaneCheckingEnabled);
        } else {
            textSegundosTrabalho.setEditable(false);
            textMinutosTrabalho.setEditable(false);
            textSegundosPausa.setEditable(false);
            textMinutosPausa.setEditable(false);
        }
    }

    public void funcionamento() {
        // TEMPO PADRÃO
        if (!pause) {
            if (boxPadrao.isSelected()) {
                pausa = false;
                auxMinutosTrabalho = 25;
                auxSegundosTrabalho = 0;
                if (qtdPausa == 4) {
                    auxMinutosPausa = 10;
                    auxSegundosPausa = 0;
                } else {
                    auxMinutosPausa = 5;
                    auxSegundosPausa = 0;
                }
                Timer timer = new Timer(); //new timer
                TimerTask task;
                task = new TimerTask() {
                    @Override
                    public void run() {
                        if (stop == false && reset == false && pause == false) {
                            textSession.setText("Working session!");
                            textSession.setForeground(Color.red);
                            labelSegundos.setText(Integer.toString(auxSegundosTrabalho));
                            labelMinutos.setText(Integer.toString(auxMinutosTrabalho));
                            auxSegundosTrabalho--;
                            if (auxSegundosTrabalho == -1) {
                                auxSegundosTrabalho = 59;
                                if ((auxMinutosTrabalho - 1) != -1) {
                                    auxMinutosTrabalho--;
                                } else {
                                    pausa = true;
                                    qtdPausa++;
                                    try {
                                        playSound("som.wav");
                                    } catch (LineUnavailableException | IOException | UnsupportedAudioFileException ex) {
                                        Logger.getLogger(Clock.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }

                            if (pausa) {
                                textSession.setText("Break session!");
                                if (qtdPausa == 5) {
                                    textSession.setText("Long break session!");
                                }
                                textSession.setForeground(Color.green);
                                labelSegundos.setText(Integer.toString(auxSegundosPausa));
                                labelMinutos.setText(Integer.toString(auxMinutosPausa));
                                auxSegundosPausa--;
                                if (auxSegundosPausa == -1) {
                                    auxSegundosPausa = 59;
                                    if ((auxMinutosPausa - 1) != -1) {
                                        auxMinutosPausa--;
                                    } else {
                                        timer.cancel();
                                    }
                                }
                            }
                            if (pause) {
                                timer.cancel();
                            }

                        } else {
                            timer.cancel();
                            stop = false;
                            reset = false;
                        }
                    }
                };
                timer.scheduleAtFixedRate(task, 0, 1000);

            } /**
             * **********************************************************************************************
             */
            // TEMPO PERSONALIZADO
            else if (boxPersonalizado.isSelected()) {
                pausa = false;
                auxMinutosTrabalho = Integer.parseInt(textMinutosTrabalho.getText());
                auxSegundosTrabalho = Integer.parseInt(textSegundosTrabalho.getText());
                auxMinutosPausa = Integer.parseInt(textMinutosPausa.getText());
                auxSegundosPausa = Integer.parseInt(textSegundosPausa.getText());
                Timer timer = new Timer(); //new timer
                TimerTask task = new TimerTask() {
                    @Override
                    public void run() {
                        if (stop == false && reset == false && pause == false) {
                            textSession.setText("Working Session!");
                            textSession.setForeground(Color.red);
                            labelSegundos.setText(Integer.toString(auxSegundosTrabalho));
                            labelMinutos.setText(Integer.toString(auxMinutosTrabalho));
                            auxSegundosTrabalho--;
                            if (auxSegundosTrabalho == -1) {
                                auxSegundosTrabalho = 59;
                                if ((auxMinutosTrabalho - 1) != -1) {
                                    auxMinutosTrabalho--;
                                } else {
                                    pausa = true;
                                    try {
                                        playSound("som.wav");
                                    } catch (LineUnavailableException | IOException | UnsupportedAudioFileException ex) {
                                        Logger.getLogger(Clock.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }

                            if (pausa) {
                                textSession.setText("Break Session!");
                                textSession.setForeground(Color.green);
                                labelSegundos.setText(Integer.toString(auxSegundosPausa));
                                labelMinutos.setText(Integer.toString(auxMinutosPausa));
                                auxSegundosPausa--;
                                if (auxSegundosPausa == -1) {
                                    auxSegundosPausa = 59;
                                    if ((auxMinutosPausa - 1) != -1) {
                                        auxMinutosPausa--;
                                    } else {
                                        timer.cancel();
                                    }
                                }
                                if (pause) {
                                    timer.cancel();
                                }
                            }
                        } else {
                            timer.cancel();
                            stop = false;
                            reset = false;
                        }
                    }
                };
                timer.scheduleAtFixedRate(task, 0, 1000);
            }
        } else if (pause) {
            pause = false;
            if (boxPadrao.isSelected()) {
                pausa = false;
                auxMinutosTrabalho = minP;
                auxSegundosTrabalho = secP;
                if (qtdPausa == 4) {
                    auxMinutosPausa = 10;
                    auxSegundosPausa = 0;
                } else {
                    auxMinutosPausa = 5;
                    auxSegundosPausa = 0;
                }
                Timer timer = new Timer(); //new timer
                TimerTask task = new TimerTask() {
                    @Override
                    public void run() {
                        if (stop == false && reset == false && pause == false) {
                            textSession.setText("Working session!");
                            textSession.setForeground(Color.red);
                            labelSegundos.setText(Integer.toString(auxSegundosTrabalho));
                            labelMinutos.setText(Integer.toString(auxMinutosTrabalho));
                            auxSegundosTrabalho--;
                            if (auxSegundosTrabalho == -1) {
                                auxSegundosTrabalho = 59;
                                if ((auxMinutosTrabalho - 1) != -1) {
                                    auxMinutosTrabalho--;
                                } else {
                                    pausa = true;
                                    qtdPausa++;
                                    try {
                                        playSound("som.wav");
                                    } catch (LineUnavailableException | IOException | UnsupportedAudioFileException ex) {
                                        Logger.getLogger(Clock.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }

                            if (pausa) {
                                textSession.setText("Break session!");
                                if (qtdPausa == 5) {
                                    textSession.setText("Long break session!");
                                }
                                textSession.setForeground(Color.green);
                                labelSegundos.setText(Integer.toString(auxSegundosPausa));
                                labelMinutos.setText(Integer.toString(auxMinutosPausa));
                                auxSegundosPausa--;
                                if (auxSegundosPausa == -1) {
                                    auxSegundosPausa = 59;
                                    if ((auxMinutosPausa - 1) != -1) {
                                        auxMinutosPausa--;
                                    } else {
                                        timer.cancel();
                                    }
                                }
                            }
                            if (pause) {
                                timer.cancel();
                            }

                        } else {
                            timer.cancel();
                            stop = false;
                            reset = false;
                        }
                    }
                };
                timer.scheduleAtFixedRate(task, 0, 1000);

            } else if (boxPersonalizado.isSelected()) {
                pausa = false;
                auxMinutosTrabalho = minP;
                auxSegundosTrabalho = secP;
                auxMinutosPausa = Integer.parseInt(textMinutosPausa.getText());
                auxSegundosPausa = Integer.parseInt(textSegundosPausa.getText());
                Timer timer = new Timer(); //new timer
                TimerTask task = new TimerTask() {
                    @Override
                    public void run() {
                        if (stop == false && reset == false && pause == false) {
                            textSession.setText("Working Session!");
                            textSession.setForeground(Color.red);
                            labelSegundos.setText(Integer.toString(auxSegundosTrabalho));
                            labelMinutos.setText(Integer.toString(auxMinutosTrabalho));
                            auxSegundosTrabalho--;
                            if (auxSegundosTrabalho == -1) {
                                auxSegundosTrabalho = 59;
                                if ((auxMinutosTrabalho - 1) != -1) {
                                    auxMinutosTrabalho--;
                                } else {
                                    pausa = true;
                                    try {
                                        playSound("som.wav");
                                    } catch (LineUnavailableException | IOException | UnsupportedAudioFileException ex) {
                                        Logger.getLogger(Clock.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }

                            if (pausa) {
                                textSession.setText("Break Session!");
                                textSession.setForeground(Color.green);
                                labelSegundos.setText(Integer.toString(auxSegundosPausa));
                                labelMinutos.setText(Integer.toString(auxMinutosPausa));
                                auxSegundosPausa--;
                                if (auxSegundosPausa == -1) {
                                    auxSegundosPausa = 59;
                                    if ((auxMinutosPausa - 1) != -1) {
                                        auxMinutosPausa--;
                                    } else {
                                        timer.cancel();
                                    }
                                }
                                if (pause) {
                                    timer.cancel();
                                }
                            }
                        } else {
                            timer.cancel();
                            stop = false;
                            reset = false;
                        }
                    }
                };
                timer.scheduleAtFixedRate(task, 0, 1000);
            }
        }

    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton botaoPause;
    private javax.swing.JButton botaoReset;
    private javax.swing.JButton botaoStart;
    private javax.swing.JButton botaoStop;
    private javax.swing.JCheckBox boxPadrao;
    private javax.swing.JCheckBox boxPersonalizado;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel labelMinutos;
    private javax.swing.JLabel labelSegundos;
    private javax.swing.JTextField textMinutosPausa;
    private javax.swing.JTextField textMinutosTrabalho;
    private javax.swing.JTextField textSegundosPausa;
    private javax.swing.JTextField textSegundosTrabalho;
    private javax.swing.JLabel textSession;
    // End of variables declaration                   
}
